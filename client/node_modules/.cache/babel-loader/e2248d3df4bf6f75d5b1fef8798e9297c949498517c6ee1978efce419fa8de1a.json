{"ast":null,"code":"var _jsxFileName = \"/home/hawkins/cinemate/client/src/components/PayPalButton.jsx\";\nimport { PayPalScriptProvider, PayPalButtons } from \"@paypal/react-paypal-js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PayPalButton = () => {\n  // PayPal SDK options\n  const paypalOptions = {\n    \"client-id\": \"AWbvlg_vBugSrm-v0-cJ9cuqo8FCHcmXQPBmIkkjNIEHSmcYPf1voNdfBuGecSYz0IIOPwZTY-y4sA54\",\n    currency: \"USD\"\n  };\n\n  // PayPal button styles\n  const buttonStyles = {\n    layout: \"vertical\",\n    color: \"gold\",\n    shape: \"pill\",\n    label: \"paypal\"\n  };\n\n  // On successful payment\n  const onPaymentSuccess = data => {\n    console.log(\"Payment successful!\", data);\n    // Perform any necessary actions after payment\n  };\n\n  // On error or cancellation\n  const onPaymentError = error => {\n    console.log(\"Payment error or cancellation!\", error);\n    // Handle error or cancellation\n  };\n\n  return /*#__PURE__*/_jsxDEV(PayPalScriptProvider, {\n    options: paypalOptions,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"paypal\",\n      children: /*#__PURE__*/_jsxDEV(PayPalButtons, {\n        style: buttonStyles,\n        createOrder: (data, actions) => {\n          // Define your createOrder function to set up the payment details\n          return actions.order.create({\n            purchase_units: [{\n              amount: {\n                value: \"10.00\"\n              }\n            }]\n          });\n        },\n        onApprove: (data, actions) => {\n          // Capture the payment and execute any necessary actions\n          return actions.order.capture().then(onPaymentSuccess);\n        },\n        onError: onPaymentError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 6\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_c = PayPalButton;\nexport default PayPalButton;\nvar _c;\n$RefreshReg$(_c, \"PayPalButton\");","map":{"version":3,"names":["PayPalScriptProvider","PayPalButtons","jsxDEV","_jsxDEV","PayPalButton","paypalOptions","currency","buttonStyles","layout","color","shape","label","onPaymentSuccess","data","console","log","onPaymentError","error","options","children","className","style","createOrder","actions","order","create","purchase_units","amount","value","onApprove","capture","then","onError","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/hawkins/cinemate/client/src/components/PayPalButton.jsx"],"sourcesContent":["import { PayPalScriptProvider, PayPalButtons } from \"@paypal/react-paypal-js\";\n\nconst PayPalButton = () => {\n  // PayPal SDK options\n  const paypalOptions = {\n    \"client-id\": \"AWbvlg_vBugSrm-v0-cJ9cuqo8FCHcmXQPBmIkkjNIEHSmcYPf1voNdfBuGecSYz0IIOPwZTY-y4sA54\",\n    currency: \"USD\",\n  };\n\n  // PayPal button styles\n  const buttonStyles = {\n    layout: \"vertical\",\n    color: \"gold\",\n    shape: \"pill\",\n    label: \"paypal\",\n  };\n\n  // On successful payment\n  const onPaymentSuccess = (data) => {\n    console.log(\"Payment successful!\", data);\n    // Perform any necessary actions after payment\n  };\n\n  // On error or cancellation\n  const onPaymentError = (error) => {\n    console.log(\"Payment error or cancellation!\", error);\n    // Handle error or cancellation\n  };\n\n  return (\n    <PayPalScriptProvider options={paypalOptions}>\n     <div className='paypal'>\n      <PayPalButtons\n        style={buttonStyles}\n        createOrder={(data, actions) => {\n          // Define your createOrder function to set up the payment details\n          return actions.order.create({\n            purchase_units: [\n              {\n                amount: {\n                  value: \"10.00\",\n                },\n              },\n            ],\n          });\n        }}\n        onApprove={(data, actions) => {\n          // Capture the payment and execute any necessary actions\n          return actions.order.capture().then(onPaymentSuccess);\n        }}\n        onError={onPaymentError}\n      />\n     </div>\n    </PayPalScriptProvider>\n  );\n};\n\nexport default PayPalButton;\n\n"],"mappings":";AAAA,SAASA,oBAAoB,EAAEC,aAAa,QAAQ,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,YAAY,GAAGA,CAAA,KAAM;EACzB;EACA,MAAMC,aAAa,GAAG;IACpB,WAAW,EAAE,kFAAkF;IAC/FC,QAAQ,EAAE;EACZ,CAAC;;EAED;EACA,MAAMC,YAAY,GAAG;IACnBC,MAAM,EAAE,UAAU;IAClBC,KAAK,EAAE,MAAM;IACbC,KAAK,EAAE,MAAM;IACbC,KAAK,EAAE;EACT,CAAC;;EAED;EACA,MAAMC,gBAAgB,GAAIC,IAAI,IAAK;IACjCC,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEF,IAAI,CAAC;IACxC;EACF,CAAC;;EAED;EACA,MAAMG,cAAc,GAAIC,KAAK,IAAK;IAChCH,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEE,KAAK,CAAC;IACpD;EACF,CAAC;;EAED,oBACEd,OAAA,CAACH,oBAAoB;IAACkB,OAAO,EAAEb,aAAc;IAAAc,QAAA,eAC5ChB,OAAA;MAAKiB,SAAS,EAAC,QAAQ;MAAAD,QAAA,eACtBhB,OAAA,CAACF,aAAa;QACZoB,KAAK,EAAEd,YAAa;QACpBe,WAAW,EAAEA,CAACT,IAAI,EAAEU,OAAO,KAAK;UAC9B;UACA,OAAOA,OAAO,CAACC,KAAK,CAACC,MAAM,CAAC;YAC1BC,cAAc,EAAE,CACd;cACEC,MAAM,EAAE;gBACNC,KAAK,EAAE;cACT;YACF,CAAC;UAEL,CAAC,CAAC;QACJ,CAAE;QACFC,SAAS,EAAEA,CAAChB,IAAI,EAAEU,OAAO,KAAK;UAC5B;UACA,OAAOA,OAAO,CAACC,KAAK,CAACM,OAAO,CAAC,CAAC,CAACC,IAAI,CAACnB,gBAAgB,CAAC;QACvD,CAAE;QACFoB,OAAO,EAAEhB;MAAe;QAAAiB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACe,CAAC;AAE3B,CAAC;AAACC,EAAA,GArDIjC,YAAY;AAuDlB,eAAeA,YAAY;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}